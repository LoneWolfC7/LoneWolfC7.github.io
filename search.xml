<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>单调栈与单调队列</title>
    <url>/2025/02/12/%E5%8D%95%E8%B0%83%E6%A0%88%E4%B8%8E%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>单调栈与单调队列一般存在以下三种形式：存值，存下标，数组实现，数组实现的优点在于在清空栈时只需top=0即可</p>
<h1>单调栈</h1>
<p>伪代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(i=1-&gt;n)//n为元素数量</span><br><span class="line">&#123;</span><br><span class="line">    ① while(栈非空且入栈元素优于栈顶元素)栈顶出栈//维持栈的单调性</span><br><span class="line">    //while结束的两种可能的判断</span><br><span class="line">    ② 如果(栈顶元素优于入栈元素)更新一次答案，此时栈顶即为最优解</span><br><span class="line">    否则 不存在答案</span><br><span class="line">    ③ 将新元素入栈</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>eg:输入n个数字 输出每个数字左侧距离该数字最近的比它小的元素，不存在则输出-1</strong><br>
in      5<br>
7 8 5 6 7<br>
out     -1 7 -1 5 6</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存值</span></span><br><span class="line"><span class="type">int</span> a[N],ans[N];<span class="comment">//a[N]用来存放输入的数字，ans[N]用于存放答案</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(stk.<span class="built_in">size</span>()&amp;&amp;stk.top&gt;=a[i])stk.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span>(stk.<span class="built_in">empty</span>())ans[i]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> ans[i]=stk.<span class="built_in">top</span>();</span><br><span class="line">    stk.<span class="built_in">push</span>(a[i]);</span><br><span class="line">    cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">//存下标＋数组实现</span></span><br><span class="line"><span class="type">int</span> a[N],stk[N],ans[N],top;<span class="comment">//stk数组用来模拟下标</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(top&amp;&amp;a[stk[top]]&gt;=a[i])top--;</span><br><span class="line">    <span class="keyword">if</span>(top) ans[i]=a[stk[top]];</span><br><span class="line">    <span class="keyword">else</span> ans[i]=<span class="number">-1</span>;</span><br><span class="line">    stk[++top]=i;</span><br><span class="line">    cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1>单调队列</h1>
<p>通过deque实现，在队头进行出队操作，在队尾进行入队和出队操作，最典型的是用于处理滑动窗口<br>
伪代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(i=1-&gt;n)</span><br><span class="line">&#123;</span><br><span class="line">    ① while(非空且队头不合法)弹出头//队头合法性</span><br><span class="line">    while(非空且i优于队尾)弹出尾//队尾优越性</span><br><span class="line">    ② 将i入队</span><br><span class="line">    ③ 此时队头为最优</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.luogu.com.cn/problem/P1886"><em><strong>例题</strong></em></a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//deque存下标实现</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//滑动窗口的区间为[i-k+1,i]</span></span><br><span class="line">    <span class="keyword">while</span> (dq.<span class="built_in">size</span>() &amp;&amp; dq.<span class="built_in">front</span>() &lt; i - k + <span class="number">1</span>)dq.<span class="built_in">pop_front</span>();</span><br><span class="line">    <span class="keyword">while</span> (dq.<span class="built_in">size</span>() &amp;&amp; a[i]&lt;= a[dq.<span class="built_in">back</span>()])dq.<span class="built_in">pop_back</span>();</span><br><span class="line">    dq.<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="comment">//当第一个滑动窗口开始形成时，开始输出答案</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= k)cout &lt;&lt; a[dq.<span class="built_in">front</span>()] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>#TODO 数组模拟</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>图</title>
    <url>/2025/02/12/%E5%9B%BE/</url>
    <content><![CDATA[<h1>基本介绍</h1>
<p>图(G)是由顶点集(V)和边集(E)组成的有序对，G=(V,E)，可以用|V|，|E|表示图中的顶点数量和边数量<br>
图既可以是有向的，即单向链接，也可以是无向的，即双向链接。<br>
只包含有向边的图称为有向图，只包含无向边的图称为无向图<br>
若边关联了权重/成本，则叫做权重图，反之叫做非权重图</p>
<h1>图的属性</h1>
<p>一条边的两个端点为同一个顶点，称为自环<br>
同一条边出现了不止一次，称为多重边<br>
不包含自环或多重边的图称为简单图</p>
<ul>
<li>边的数量<br>
在一个简单图中，给定顶点的数量n(|V|=n)<br>
有向图：0≤|E|≤n*(n-1)<br>
无向图：0≤|E|≤n*(n-1)/2<br>
若图中的边的数量接近最大的可能边数(顶点数量的平方)，则称这个图是稠密的。<br>
若图中的边的数量接近顶点数量，则称这个图是稀疏的。<br>
对图进行处理时，根据图的稠密/稀疏做出决策，如 使用邻接矩阵存储稠密的图，使用邻接表存储稀疏的图</li>
<li>Path,Walk,Trail<br>
简单路径(Path)：没有重复边/点的途径(Walk)<br>
途径中的顶点可以重复但是边不能重复，则称为Trail</li>
<li>链接<br>
强链接：从任意顶点可以去到任意的其他顶点<br>
若是一个无向图，直接称它为connected</li>
<li>环<br>
开始与结束为同一顶点且边数&gt;0</li>
</ul>
<h1>图的存储方式</h1>
<p>图的存储方式分为邻接矩阵和邻接表。使用邻接矩阵，当结点数量较多时，比如有1e5个点，那么至少开1e10的数组。<br>
相较之下，使用邻接表就更为方便。邻接表包括前向星和vector两种形式。使用vector变长数组支持排序。<br>
用vector<int> g[N]来存图，g[i]表示i的所有出点编号。若有x-&gt;y，则g[x].push_back(y)</p>
]]></content>
  </entry>
  <entry>
    <title>面向竞赛的C++STL</title>
    <url>/2025/01/25/Basic-STL/</url>
    <content><![CDATA[<h1>面向竞赛的 C++ STL 介绍</h1>
<p>参考链接：<br>
<a href="https://space.bilibili.com/231911980/lists/4220963?type=season">https://space.bilibili.com/231911980/lists/4220963?type=season</a><br>
<a href="https://space.bilibili.com/498363953/lists/241249?type=season">https://space.bilibili.com/498363953/lists/241249?type=season</a><br>
<a href="https://blog.csdn.net/weixin_51797626/article/details/123317216?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_51797626/article/details/123317216?spm=1001.2014.3001.5501</a></p>
<h2 id="vector">vector</h2>
<p><strong>涉及函数:at,back,push_back,pop_back,size,erase,clear,begin,rbegin,end,resize</strong></p>
<ul>
<li>创建数组</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v<span class="comment">//创建int类型的空数组v</span></span><br><span class="line">v.<span class="built_in">resize</span>(n)<span class="comment">//创建后可随时自定义大小</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span><span class="comment">//创建int类型的数组v，包含10个元素，所有元素默认初始化为0</span></span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>,<span class="number">66</span>)</span><span class="comment">//创建int类型的数组v，包含10个元素，所有元素默认初始化为66</span></span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; v</span>=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;<span class="comment">//通过列表初始化创建</span></span><br></pre></td></tr></table></figure>
<ul>
<li>访问元素</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x=v[<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> y=v.<span class="built_in">at</span>(<span class="number">1</span>);<span class="comment">//会进行边界检查，可以防止越界</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改元素</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>);<span class="comment">//在数组最后添加元素1</span></span><br><span class="line">v.<span class="built_in">pop_back</span>();<span class="comment">//删除数组最后一个元素</span></span><br><span class="line">v.<span class="built_in">clear</span>();<span class="comment">//清空</span></span><br><span class="line">v.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>()+n);<span class="comment">//删除第n+1个元素</span></span><br></pre></td></tr></table></figure>
<ul>
<li>遍历元素</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常规</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;v.<span class="built_in">size</span>();i++)</span><br><span class="line">    cout&lt;&lt;v[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="comment">//范围基</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num:v)</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="comment">//pair/结构体</span></span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; v_pair;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; [a.b]:v_pair)</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;b&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>查询大小</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> size=v.<span class="built_in">size</span>()<span class="comment">//返回unsigned int，&gt;=0</span></span><br><span class="line"><span class="keyword">if</span>(v.<span class="built_in">empty</span>())...<span class="comment">//检查v是否为空</span></span><br><span class="line"><span class="keyword">if</span>(v.<span class="built_in">size</span>())...<span class="comment">//检查v是否为空</span></span><br></pre></td></tr></table></figure>
<h4 id="例题"><a href="https://www.starrycoding.com/problem/330">例题</a></h4>
<hr>
<h2 id="stack">stack</h2>
<p><strong>涉及函数:push,top,pop,size,empty</strong><br>
<strong>常用于:单调栈，括号匹配，dfs，tarjan 求强连通分量，波兰表达式(计算器)</strong></p>
<ul>
<li>初始化</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">stack &lt;<span class="type">int</span>&gt; stk;<span class="comment">//栈不允许列表初始化和填充相同元素</span></span><br><span class="line">stack &lt;<span class="type">int</span>&gt; <span class="built_in">stk2</span>(stk);</span><br><span class="line">stack &lt;<span class="type">int</span>&gt; stk3=stk2;</span><br></pre></td></tr></table></figure>
<ul>
<li>出入栈
<blockquote>
<p>如果你问一个人 push 的反义词是什么，如果 TA 说是 pop，那么 TA 一定是 c 艹选手</p>
</blockquote>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">stk.<span class="built_in">push</span>(<span class="number">10</span>);<span class="comment">//[10(top)]</span></span><br><span class="line">stk.<span class="built_in">push</span>(<span class="number">20</span>);<span class="comment">//[10,20(top)]</span></span><br><span class="line">stk.<span class="built_in">push</span>(<span class="number">50</span>);<span class="comment">//[10,20,50(top)]</span></span><br><span class="line">cout&lt;&lt;stk.<span class="built_in">top</span>()&lt;&lt;<span class="string">&#x27;\n&#x27;</span><span class="comment">//50,[10,,20,50(top)]</span></span><br><span class="line">stk.<span class="built_in">pop</span>()<span class="comment">//[10,20(top)],使用pop前判断非空</span></span><br><span class="line"><span class="keyword">if</span>(stk.<span class="built_in">size</span>())stk.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(!stk.<span class="built_in">empty</span>())stk.pop;</span><br></pre></td></tr></table></figure>
<ul>
<li>清空栈</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(stk.<span class="built_in">size</span>())stk.<span class="built_in">pop</span>();<span class="comment">//时间复杂度O(n)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>数组模拟</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下标1为栈底，变量top为栈顶</span></span><br><span class="line"><span class="type">int</span> stk[N],top=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//入栈x</span></span><br><span class="line">stk[++top]=x;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line">top--;</span><br><span class="line"><span class="comment">//取出栈顶元素</span></span><br><span class="line">cout&lt;&lt;stk[top]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">//获取大小</span></span><br><span class="line">cout&lt;&lt;top&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="keyword">if</span>(top)...</span><br><span class="line"><span class="comment">//遍历栈</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;i++)...</span><br></pre></td></tr></table></figure>
<h4 id="例题-v2"><a href="https://www.starrycoding.com/problem/38">例题</a></h4>
<ul>
<li>也可用 vector,但 pop 时时间复杂度为 O(n)</li>
</ul>
<hr>
<h2 id="队列">队列</h2>
<h3 id="queue">queue</h3>
<p><strong>涉及函数:push,pop,front,back,size,empty</strong><br>
<strong>常用于:单调队列，模拟，约瑟夫环，bfs，分支限界搜索等</strong></p>
<ul>
<li>创建队列</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br></pre></td></tr></table></figure>
<ul>
<li>出入队列</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">q.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">q.<span class="built_in">pop</span>(<span class="number">10</span>);<span class="comment">//使用pop前判断非空</span></span><br></pre></td></tr></table></figure>
<ul>
<li>访问元素</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">back</span>();</span><br></pre></td></tr></table></figure>
<h4 id="例题-v3"><a href="https://www.starrycoding.com/problem/351">例题</a></h4>
<ul>
<li>检查队列大小/是否为空（同上）</li>
</ul>
<p><code>queue</code>和<code>stack</code>一样，不允许遍历</p>
<ul>
<li>数组模拟</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> q[N]<span class="comment">//N为push的最大次数</span></span><br><span class="line"><span class="type">int</span> qh=<span class="number">1</span>,qt=<span class="number">0</span>;<span class="comment">//q_head,q_tail;[qh,qt]为有效区间</span></span><br><span class="line">q[++qt]=x;<span class="comment">//入队</span></span><br><span class="line">qh++;<span class="comment">//出队</span></span><br><span class="line">qt-qh<span class="number">+1</span><span class="comment">//大小</span></span><br></pre></td></tr></table></figure>
<h3 id="deque">deque</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//支持遍历，头尾均支持出入队</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt; dq;</span><br><span class="line">dq.<span class="built_in">push_front</span>(<span class="number">1</span>);</span><br><span class="line">dq.<span class="built_in">push_bacK</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> t = dq.<span class="built_in">front</span>();</span><br><span class="line">t = dq.<span class="built_in">back</span>();</span><br><span class="line">dq.<span class="built_in">size</span>();</span><br><span class="line">dq.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//弹出时先判断是否为空</span></span><br><span class="line">dq.<span class="built_in">pop_front</span>();</span><br><span class="line">dq.<span class="built_in">pop_back</span>();</span><br></pre></td></tr></table></figure>
<h4 id="例题-v4"><a href="https://www.starrycoding.com/problem/357">例题</a></h4>
<h3 id="priority-queue">priority_queue</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于每次提取队列种最大的元素或最小的元素</span></span><br><span class="line"><span class="comment">//自动排序内部数，小到大或大到小，不支持遍历</span></span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q1; </span><br><span class="line"><span class="comment">//greater是小根堆，用vector装载内部元素</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, less&lt;<span class="type">int</span>&gt;&gt; q2; </span><br><span class="line"><span class="comment">//less是大根堆</span></span><br><span class="line"></span><br><span class="line">q<span class="number">1.</span><span class="built_in">push</span>(<span class="number">3</span>), q<span class="number">2.</span><span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> t = q<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">while</span> (q<span class="number">1.</span><span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> t = q<span class="number">1.</span><span class="built_in">top</span>();<span class="comment">//小根堆所以取出的数是所有数内最小的</span></span><br><span class="line">	q<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">	cout &lt;&lt; t &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="例题-v5"><a href="https://www.starrycoding.com/problem/361">例题</a></h4>
<hr>
<h2 id="string">string</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> t=a.<span class="built_in">find</span>(<span class="string">&#x27;x&#x27;</span>);<span class="comment">//获取第一个字符x出现的位置的下标</span></span><br><span class="line">string g=a.<span class="built_in">substr</span>(<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//从下标0开始(包括0)往后取三个字符</span></span><br><span class="line">stinrg g=a.<span class="built_in">substr</span>(<span class="number">3</span>)<span class="comment">//从下标3开始到结束</span></span><br></pre></td></tr></table></figure>
<h2 id="algorithm">algorithm</h2>
<h3 id="next-permutation-prev-permutation">next_permutation,prev_permutation</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全排列函数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, a[<span class="number">100</span>];</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = i;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            cout &lt;&lt; a[i] &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(<span class="number">1</span> + a, <span class="number">1</span> + a + n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="lower-bound">lower_bound</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找大于等于某数的第一个数，查找的数组必须有序</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n = <span class="number">7</span>;<span class="comment">//7个数</span></span><br><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">111</span> &#125;;</span><br><span class="line">	</span><br><span class="line"><span class="type">int</span> t = <span class="built_in">lower_bound</span>(a, a + n, <span class="number">8</span>) - a;<span class="comment">//查询范围：0 ~ 6。数组中大于等于8的第一个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t != n)<span class="comment">//找不到会返回边界a+n，即7</span></span><br><span class="line">	cout &lt;&lt; a[t] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b[] = &#123; <span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">111</span> &#125;;</span><br><span class="line">t = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>, <span class="number">8</span>) - b;<span class="comment">//查询范围：1~8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t != n + <span class="number">1</span>)<span class="comment">//找不到会返回边界，边界是 8</span></span><br><span class="line">	cout &lt;&lt; b[t] &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<h3 id="unique">unique</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">	</span><br><span class="line"><span class="comment">//unique本身的功能是将排序后的数组内的所有重复元素在 O(n) 时间内堆积到数组末端</span></span><br><span class="line"><span class="comment">//同时它会返回一个指针/下标（区别于你传入的是容器还是数组） —— 堆积的第一个重复元素的位置</span></span><br><span class="line">	</span><br><span class="line">vec.<span class="built_in">erase</span>(<span class="built_in">unique</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>()), vec.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//我们再利用vector的区间删除功能就能完成去重的过程</span></span><br></pre></td></tr></table></figure>
<h2 id="set-map">set,map</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以自动排序去重</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; se;</span><br><span class="line"><span class="comment">//关键字 关键值</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;<span class="comment">//map相当于拥有了关键值的set</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">se.<span class="built_in">insert</span>(<span class="number">3</span>);<span class="comment">//插入一个 3 关键字</span></span><br><span class="line"></span><br><span class="line">mp.<span class="built_in">insert</span>(&#123; <span class="number">1</span>,<span class="number">2</span> &#125;);<span class="comment">//插入一个 1 关键字，并给这个关键字的关键值赋值 2</span></span><br><span class="line">mp.<span class="built_in">insert</span>(&#123; <span class="number">1</span>,<span class="number">1</span> &#125;);<span class="comment">//因为 1 关键字已经存在，所以把关键值修改成 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mp.insert(&#123; 1,2 &#125;) 等价于</span></span><br><span class="line">mp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">mp[<span class="number">1</span>] += <span class="number">2</span>;<span class="comment">//1 关键字的关键值 + 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j : se)cout &lt;&lt; j &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j : mp)</span><br><span class="line">	cout &lt;&lt; j.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; j.second &lt;&lt; endl;<span class="comment">//两个值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">mp.<span class="built_in">erase</span>(<span class="number">3</span>); se.<span class="built_in">erase</span>(<span class="number">3</span>);<span class="comment">//删除关键字为 3 的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是遍历删除 map 内特定的第 K 个数，跟 vector 删除一样要注意指针衔接</span></span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>();k++) &#123;</span><br><span class="line">	<span class="keyword">if</span> (k == K)it = mp.<span class="built_in">erase</span>(it);</span><br><span class="line">	<span class="keyword">else</span> it++;</span><br><span class="line">&#125;<span class="comment">//迭代器方式</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t = mp.<span class="built_in">count</span>(<span class="number">3</span>);<span class="comment">//返回指定元素出现的次数</span></span><br><span class="line">t = mp.<span class="built_in">size</span>();<span class="comment">//返回map中元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="keyword">auto</span> j = mp.<span class="built_in">find</span>(<span class="number">3</span>);<span class="comment">//查找 3 关键字在 map 内的下标</span></span><br><span class="line"><span class="comment">//如果不存在则 j == mp.end()</span></span><br><span class="line"><span class="keyword">if</span> (j != mp.<span class="built_in">end</span>())cout &lt;&lt; (*j).first;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> g = mp.<span class="built_in">lower_bound</span>(<span class="number">3</span>);<span class="comment">//查找 map 内第一个大于等于 3 的数的下标</span></span><br><span class="line"><span class="comment">//如果不存在则 g == mp.end()</span></span><br><span class="line"><span class="keyword">if</span> (g != mp.<span class="built_in">end</span>())cout &lt;&lt; (*g).first;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="pair">pair</h2>
<p>一个变量携带两个值，可以映射数组中对应元素的下标</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line">cin &gt;&gt; pii.first &gt;&gt; pii.second;</span><br><span class="line">cout &lt;&lt; pii.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; pii.second;</span><br></pre></td></tr></table></figure>
<h4 id="例题-v6"><a href="https://www.luogu.com.cn/problem/P1223#submit" title="排队接水">例题</a></h4>
<hr>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>DFS与BFS</title>
    <url>/2025/02/17/DFS%E4%B8%8EBFS/</url>
    <content><![CDATA[<h1>模板</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dep)</span><span class="comment">//dep代表递归层数或要填的第几个空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(所有空都填完了)</span><br><span class="line">    &#123;</span><br><span class="line">        判断最优解/记录答案；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(枚举这个空能填的选项)</span><br><span class="line">        <span class="keyword">if</span>(这个选项是合法的)</span><br><span class="line">        &#123;</span><br><span class="line">            记录下这个空（保存现场）;</span><br><span class="line">            <span class="built_in">dfs</span>(dep<span class="number">+1</span>);</span><br><span class="line">            取消这个空（恢复现场）;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(初始状态)<span class="comment">//将初始状态入队</span></span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(枚举所有可扩展状态)<span class="comment">//找到u的所有可达状态v</span></span><br><span class="line">            <span class="keyword">if</span>(是合法的)<span class="comment">//v需要满足某些条件，如未访问过、未在队内等</span></span><br><span class="line">                q.<span class="built_in">push</span>(v);<span class="comment">//入队（同时可能需要维护某些必要信息）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>树的遍历</h1>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基操</title>
    <url>/2025/01/21/Markdown/</url>
    <content><![CDATA[<p>pr一点markdown教程，学会用笔才能写好字，把文章写漂亮<br>
<a href="https://www.markdown.cn/">本文pr来源</a><br>
<a href="https://blog.csdn.net/qq_40896997/article/details/106551767">emoji</a>😊<br>
<a href="https://blog.csdn.net/wzk4869/article/details/126863936">数学表达式</a><br>
<a href="https://blog.csdn.net/weixin_51146207/article/details/137903410?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-137903410-blog-128811523.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">vscode里的markdown</a></p>
<h1>Markdown 语法速查表</h1>
<p>Markdown 语法参考手册 / 速查表。</p>
<h2 id="总览">总览</h2>
<p>此 Markdown 语法速查表提供了所有 Markdown 语法元素的快速参考。但是此速查表无法涵盖所有极限用法，因此，如果您需要某些语法元素的详细信息，请参阅我们的 <a href="https://www.markdown.xyz/basic-syntax">基本语法</a> 和 <a href="https://www.markdown.xyz/extended-syntax">扩展语法</a> 手册。</p>
<h2 id="基本语法">基本语法</h2>
<p>这些是 John Gruber 的原始设计文档中列出的元素。所有 Markdown 应用程序都支持这些元素。</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>Markdown 语法</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.markdown.xyz/basic-syntax/#headings">标题（Heading）</a></td>
<td><code># H1## H2### H3</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/basic-syntax/#bold">粗体（Bold）</a></td>
<td><code>**bold text**</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/basic-syntax/#italic">斜体（Italic）</a></td>
<td><code>*italicized text*</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/basic-syntax/#blockquotes-1">引用块（Blockquote）</a></td>
<td><code>&gt; blockquote</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/basic-syntax/#ordered-lists">有序列表（Ordered List）</a></td>
<td><code>1. First item2. Second item3. Third item</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/basic-syntax/#unordered-lists">无序列表（Unordered List）</a></td>
<td><code>- First item- Second item- Third item</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/basic-syntax/#code">代码（Code）</a></td>
<td><code>code</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/basic-syntax/#horizontal-rules">分隔线（Horizontal Rule）</a></td>
<td><code>---</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/basic-syntax/#links">链接（Link）</a></td>
<td><code>[title](https://www.example.com)</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/basic-syntax/#images">图片（Image）</a></td>
<td><code>![alt text](image.jpg)</code></td>
</tr>
</tbody>
</table>
<h2 id="扩展语法">扩展语法</h2>
<p>这些元素通过添加额外的功能扩展了基本语法。但是，并非所有 Markdown 应用程序都支持这些元素。</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>Markdown 语法</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.markdown.xyz/extended-syntax/#tables">表格（Table）</a></td>
<td>`</td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/extended-syntax/#fenced-code-blocks">代码块（Fenced Code Block）</a></td>
<td><code>&#123; &quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Smith&quot;, &quot;age&quot;: 25&#125;</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/extended-syntax/#footnotes">脚注（Footnote）</a></td>
<td><code>Here's a sentence with a footnote. [^1][^1]: This is the footnote.</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/extended-syntax/#heading-ids">标题编号（Heading ID）</a></td>
<td><code>### My Great Heading &#123;#custom-id&#125;</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/extended-syntax/#definition-lists">定义列表（Definition List）</a></td>
<td><code>term: definition</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/extended-syntax/#strikethrough">删除线（Strikethrough）</a></td>
<td><code>~~The world is flat.~~</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/extended-syntax/#task-lists">任务列表（Task List）</a></td>
<td><code>- [x] Write the press release- [ ] Update the website- [ ] Contact the media</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/extended-syntax/#emoji">Emoji</a> (see also <a href="https://www.markdown.xyz/extended-syntax/#copying-and-pasting-emoji">Copying and Pasting Emoji</a>)</td>
<td><code>That is so funny! :joy:</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/extended-syntax/#highlight">Highlight</a></td>
<td><code>I need to highlight these ==very important words==.</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/extended-syntax/#subscript">Subscript</a></td>
<td><code>H~2~O</code></td>
</tr>
<tr>
<td><a href="https://www.markdown.xyz/extended-syntax/#superscript">Superscript</a></td>
<td><code>X^2^</code></td>
</tr>
</tbody>
</table>
<h2 id="下载">下载</h2>
<p>你可以 <a href="https://www.markdown.xyz/assets/markdown-cheat-sheet.md">下载此速查表的 Markdown 源码文件</a>，并在你自己的 Markdown 程序中使用。</p>
]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>离散化与树状数组</title>
    <url>/2025/02/21/%E7%A6%BB%E6%95%A3%E5%8C%96%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1>离散化</h1>
<p>特征：操作次数不多，相关点不多</p>
<ul>
<li>离线与在线<br>
离线：先存操作/询问后执行操作<br>
在线：输入一次数据执行一次操作</li>
</ul>
<ol>
<li>找出相关点并存下/收集所有需要离散化的值</li>
<li>将相关点排序并去重</li>
<li>大点(小点)到小点(大点)的映射<br>
通过二分实现大点映射到小点（根据值找位置-&gt;二分），通过离散化数组实现小点映射到大点</li>
<li>将操作全部转化为小点上</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*输入：</span></span><br><span class="line"><span class="comment">n 个添加操作，每个操作包含一个坐标 x 和一个权重 w。</span></span><br><span class="line"><span class="comment">q 个查询操作，每个查询包含一个区间 [l, r]。</span></span><br><span class="line"><span class="comment">目标：</span></span><br><span class="line"><span class="comment">对每个查询，计算区间 [l, r] 内所有 x 的权重和。*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; LS;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">op</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">&#125; add[N], que[N];</span><br><span class="line"><span class="comment">//离散化映射</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getindex</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(LS.<span class="built_in">begin</span>(), LS.<span class="built_in">end</span>(), x) - LS.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="comment">//找出相关点并存下/收集所有需要离散化的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> w, x;</span><br><span class="line">        cin &gt;&gt; w &gt;&gt; x;</span><br><span class="line">        LS.<span class="built_in">push_back</span>(w);</span><br><span class="line">        add[i] = &#123;w, x&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        LS.<span class="built_in">push_back</span>(l), LS.<span class="built_in">push_back</span>(r);</span><br><span class="line">        que[i] = &#123;l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序和去重</span></span><br><span class="line">    <span class="built_in">sort</span>(LS.<span class="built_in">begin</span>(), LS.<span class="built_in">end</span>());</span><br><span class="line">    LS.<span class="built_in">erase</span>(<span class="built_in">unique</span>(LS.<span class="built_in">begin</span>(), LS.<span class="built_in">end</span>()), LS.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">//将操作全部转化为小点上</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">        a[<span class="built_in">getindex</span>(add[i].a)] += add[i].b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i&lt;=LS.<span class="built_in">size</span>();i++)</span><br><span class="line">        a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">getindex</span>(que[i].a), r = <span class="built_in">getindex</span>(que[i].b);</span><br><span class="line">        cout &lt;&lt; a[r] - a[l - <span class="number">1</span>]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1>树状数组</h1>
<p>lowbit()的实现，树状数组的初始化</p>
<h2 id="单点修改">单点修改</h2>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/01/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>前缀和与差分</title>
    <url>/2025/02/05/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</url>
    <content><![CDATA[<p>要对原数组a[N]进行修改与查询，需要用到前缀和数组和差分数组<br>
diff求和——&gt;a 求和——&gt;prefix</p>
<p>diff&lt;——a差分&lt;——prefix差分</p>
<h1>一维前缀和与差分</h1>
<h2 id="前缀和">前缀和</h2>
<p>前缀和可用于求指定区间的和</p>
<ol>
<li><strong>求出前缀和数组</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">前缀和数组的计算:prefix[i] = prefix[i<span class="number">-1</span>] + arr[i] (此处及下文写法i均从<span class="number">1</span>开始，以防止越界问题)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>得出区间和</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">由前缀和的可加性:sum[<span class="number">1</span>,k] + sum[k<span class="number">+1</span>,n] = sum[<span class="number">1</span>,n]</span><br><span class="line">得到sum[l,r] = sum[<span class="number">1</span>,r] - sum[<span class="number">1</span>,l<span class="number">-1</span>]，即sum=prefix[r]-prefix[l<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<h2 id="差分">差分</h2>
<p>差分可用于修改指定区间的值</p>
<ol>
<li><strong>求出差分数组</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">diff[i] = a[i] - a[i<span class="number">-1</span>]，它具有两个性质，一是可以通过求和得到a[i]，二是可以对后缀区间进行修改</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>对指定区间[l,r]的值进行修改</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">diff[l] += x;</span><br><span class="line">diff[r + <span class="number">1</span>] -= x;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>求出diff的前缀和数组，得到修改后的数组</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">a[i] = a[i<span class="number">-1</span>] + diff[i]</span><br></pre></td></tr></table></figure>
<hr>
<h1>二维前缀和与差分</h1>
<p><strong>利用数形结合</strong>，前缀和可认为是数组向前拓展/向前的射线涉及的区间的和，差分可认为是数组向后拓展/向后的射线涉及的区间的修改</p>
<h2 id="前缀和-v2">前缀和</h2>
<ol>
<li><strong>求出前缀和数组</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">        prefix[i][j] = prefix[i<span class="number">-1</span>][j] + prefix[i][j<span class="number">-1</span>] - prefix[i<span class="number">-1</span>][j<span class="number">-1</span>] + arr[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>得出区间和</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">对于指定区间，设左上角为(x1, y1)，右下角为(x2, y2)</span><br><span class="line">sum = prefix[x2][y2] - prefix[x2][y1<span class="number">-1</span>] - prefix[x1<span class="number">-1</span>][y2] + prefix[x1<span class="number">-1</span>][y1<span class="number">-1</span>];</span><br></pre></td></tr></table></figure>
<h2 id="差分-v2">差分</h2>
<ol>
<li><strong>求出差分数组</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">        d[i][j] = arr[i][j] - arr[i][j<span class="number">-1</span>] - arr[i<span class="number">-1</span>][j] + arr[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">&#123;d[i][j] += a[i][j];</span><br><span class="line">d[i + <span class="number">1</span>][j] -= a[i][j];</span><br><span class="line">d[i][j + <span class="number">1</span>] -= a[i][j];</span><br><span class="line">d[i + <span class="number">1</span>][j + <span class="number">1</span>] += a[i][j];&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>对指定区间[(x1,y1),(x2,y2)]的值进行修改</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">d[x1][y1] += c;</span><br><span class="line">d[x2 + <span class="number">1</span>][y1] -= c;</span><br><span class="line">d[x1][y2 + <span class="number">1</span>] -= c;</span><br><span class="line">d[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += c;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>求出diff的前缀和数组，得到修改后的数组</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">        arr[i][j] = arr[i<span class="number">-1</span>][j] + arr[i][j<span class="number">-1</span>] - arr[i<span class="number">-1</span>][j<span class="number">-1</span>] + d[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
